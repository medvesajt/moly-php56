###############################################################################
# Generated by arch-phpbs: https://github.com/lamskoy/arch-phpbs
#
# Maintaining/co-maintaining on AUR: php81 php80 php74 php73 php72 php71 php70 php55 php54 php53
#
# Thanks to:
#
# AUR php80 Co-maintainer: Timo Sarawinski
# AUR php70 and php71 Co-maintainer: William Gathoye <william@gathoye.be>
# AUR php74 Co-maintainer: Tomasz Gruszka <tompear79@gmail.com>
# AUR php73 Co-maintainer: Matt Harrison <matt@harrison.us.com>
# AUR php73 Contirubutor: Pierre Schmitz <pierre@archlinux.de>
# AUR php55 Original maintainer: RaphaÃ«l Doursenaud <rdoursenaud@gmail.com>
# AUR php53 Original maintainer: Felix Yan <felixonmars@archlinux.org>
###############################################################################
_phpbase="56"
_suffix=""
pkgver="5.6.40"
pkgrel="8"
pkgbase="moly-php56"
pkgdesc="PHP 5.6.40 compiled as to not conflict with mainline php"
_cppflags=" -DU_USING_ICU_NAMESPACE=1  -DU_DEFINE_FALSE_AND_TRUE=1 "
_prefix="/opt/moly/php56"
_pkgname="php56"
_srcname="php-5.6.40"
prefix="moly-"
_build_apache_cfg="etc/httpd/conf/extra"
_build_bundled_gd="0"
_build_conf_d="opt/moly/php56/etc/conf.d"
_build_embed="0"
_build_fpm_name="php-fpm"
_build_fpm_service_name="moly-php56-fpm"
_build_icu_src_dir="icu/source"
_build_ini_per_sapi="0"
_build_litespeed="0"
_build_mysql_socket="/run/mysqld/mysqld.sock"
_build_openssl_v10_patch="0"
_build_openssl_v11_patch="1"
_build_per_sapi="0"
_build_phpdbg="0"
_build_sapi_ini_apache="opt/moly/php56/etc"
_build_sapi_ini_cgi="opt/moly/php56/etc"
_build_sapi_ini_cli="opt/moly/php56/etc"
_build_sapi_ini_embed="opt/moly/php56/etc"
_build_sapi_ini_fpm="opt/moly/php56/etc"
_build_sapi_ini_litespeed="opt/moly/php56/etc"
_build_sapi_ini_phpdbg="opt/moly/php56/etc"
_build_sapi_litespeed="--with-litespeed"
_build_shared_gd="1"
_build_shared_json="1"
_build_shared_libedit="1"
_build_shared_mysqlnd="1"
_build_shared_openssl="0"
_build_shared_pdo="1"
_build_system_timezonedb="1"
_build_update_sqlite="0"
_build_uses_argon="0"
_build_uses_lmdb="0"
_build_with_custom_icu="0"
_pkgver_icu="64-1"
_priority_default="20"
_priority_dom="16"
_priority_json="15"
_priority_mysqlnd="10"
_priority_opcache="10"
_priority_openssl="05"
_priority_pdo="10"
_priority_xml="15"
_suffix=""
_suffix_so="5"
pkgname=(
    "moly-php56"
    "moly-php56-cli"
    "moly-php56-cgi"
    "moly-php56-fpm"
    "moly-php56-apache"
    "moly-php56-pear"
)
source=(
    "make-tests.patch"
    "pear-config-patcher.php"
    "php-makefile-patcher.php"
    "php-apache.conf"
    "https://php.net/distributions/php-${pkgver}.tar.xz"
    "php55-phar-names.patch"
    "openssl-1.1.patch"
    "openssl-sslv3-consts.patch"
    "fpm-numeric-uid-gid.patch"
    "fpm-reload-sighup.patch"
    "mysql-socket-php5.3.patch"
    "php-enchant-php5.3.patch"
    "php-enchant-depr.patch"
    "php-freetype-2.9.1.patch"
    "php-icu-php5.5.patch"
    "recode-php5.3.patch"
    "php-opcache-lockfile-path.patch"
    "php-mysqlnd-charsets.patch"
    "php-mysqlnd.patch"
    "debian-php-5.6.40.patch"
    "php-phpinfo.patch"
    "timezonedb-guess.patch"
    "timezonedb-php5.6.patch"
)
depends=(
)
makedepends=(
    "acl"
    "libtool"
    "autoconf"
    "automake"
    "patchelf"
    "gawk"
    "sed"
    "bash"
    "python"
    "libxml2"
    "pam"
    "krb5"
    "zlib"
    "libedit"
    "smtp-forwarder"
    "pcre"
    "apache"
    "ncurses"
    "libxcrypt"
    "systemd"
    "systemd-libs"
    "coreutils"
    "findutils"
    "openssl"
    "e2fsprogs"
    "libvpx"
)
arch=(
)
_patches=(
    "php55-phar-names.patch"
    "openssl-1.1.patch"
    "openssl-sslv3-consts.patch"
    "fpm-numeric-uid-gid.patch"
    "fpm-reload-sighup.patch"
    "mysql-socket-php5.3.patch"
    "php-enchant-php5.3.patch"
    "php-enchant-depr.patch"
    "php-freetype-2.9.1.patch"
    "php-icu-php5.5.patch"
    "recode-php5.3.patch"
    "php-opcache-lockfile-path.patch"
    "php-mysqlnd-charsets.patch"
    "php-mysqlnd.patch"
    "debian-php-5.6.40.patch"
    "php-phpinfo.patch"
    "timezonedb-guess.patch"
    "timezonedb-php5.6.patch"
)
_sapi_depends=(
    "libxml2"
    "pcre2"
    "libedit"
)
_ext_depends_snmp=(
    "net-snmp"
    "openssl"
)
_ext_depends_ftp=(
    "openssl"
)
_ext_depends_intl=(
    "icu"
)
_ext_depends_imap=(
    "pam"
    "krb5"
    "c-client"
    "libxcrypt"
    "openssl"
)
_ext_depends_gd=(
    "gd"
    "libvpx"
)
_ext_depends_mysql=(
)
_ext_depends_dba=(
    "db"
)
_ext_depends_odbc=(
    "unixodbc"
)
_ext_depends_pgsql=(
    "postgresql-libs"
)
_ext_depends_firebird=(
    "libfbclient"
)
_ext_depends_sqlite=(
    "sqlite"
)
_ext_depends_mbstring=(
)
_ext_depends_openssl=(
    "krb5"
    "e2fsprogs"
    "openssl"
)
_phpconfig="\
    --prefix=/opt/moly/php56 \
    --sbindir=/opt/moly/php56/bin \
    --localstatedir=/var \
    --with-layout=GNU \
    --disable-debug \
    --mandir=/opt/moly/php56/share/man \
    --srcdir=../php-${pkgver} \
    --libdir=/opt/moly/php56/lib \
    --datadir=/opt/moly/php56/share \
    --with-config-file-scan-dir=/${_build_conf_d} \
    --enable-filter \
    --with-pear \
    --enable-session \
    --with-mhash=/usr \
    --with-kerberos \
    --with-mysql-sock=${_build_mysql_socket} \
    --enable-mysqlnd-compression-support \
    --datarootdir=/opt/moly/php56/share \
    --with-zlib-dir=/usr \
    --enable-libxml \
    --with-pcre-regex=/usr \
    --disable-rpath \
    --config-cache \
    --with-system-tzdata \
    --with-openssl=/usr"
_phpextensions="\
    --enable-xml=shared \
    --with-xsl=shared \
    --enable-xmlreader=shared \
    --enable-xmlwriter=shared \
    --enable-wddx=shared \
    --enable-dom=shared \
    --enable-simplexml=shared \
    --enable-pdo=shared \
    --enable-mysqlnd=shared \
    --with-mysql=shared,mysqlnd \
    --with-mysqli=shared,mysqlnd \
    --with-pdo-mysql=shared,mysqlnd \
    --enable-phar=shared \
    --enable-pcntl=shared \
    --enable-posix=shared \
    --enable-shmop=shared \
    --enable-sockets=shared \
    --enable-sysvmsg=shared \
    --enable-sysvsem=shared \
    --enable-sysvshm=shared \
    --enable-tokenizer=shared
    --enable-dba=shared \
    --with-db4=/usr \
    --without-gdbm \
    --with-cdb \
    --with-pgsql=shared,/usr \
    --with-pdo-pgsql=shared,/usr \
    --with-unixODBC=shared,/usr \
    --with-pdo-odbc=shared,unixODBC,/usr \
    --with-pdo-firebird=shared,/usr \
    --with-interbase=shared,/usr \
    --with-pdo-dblib=shared,/usr \
    --with-pdo-sqlite=shared,/usr \
    --with-sqlite3=shared,/usr \
    --with-mssql=shared,/usr \
    --with-gd=shared,/usr \
    --enable-gd-native-ttf \
    --with-vpx-dir=/usr
    --with-webp-dir=/usr \
    --with-jpeg-dir=/usr \
    --with-png-dir=/usr \
    --with-xpm-dir=/usr \
    --with-freetype-dir=/usr \
    --enable-exif=shared \
    --with-tidy=shared,/usr \
    --with-iconv=shared \
    --with-xmlrpc=shared \
    --enable-bcmath=shared \
    --with-gmp=shared,/usr \
    --enable-zip=shared \
    --with-libzip=/usr \
    --with-bz2=shared,/usr \
    --enable-json=shared \
    --with-libedit=shared \
    --enable-fileinfo=shared \
    --enable-ctype=shared \
    --with-recode=shared \
    --enable-mbstring=shared \
    --enable-mbregex \
    --enable-mbregex-backtrack \
    --with-pspell=shared,/usr \
    --with-enchant=shared,/usr \
    --enable-intl=shared \
    --enable-calendar=shared \
    --with-gettext=shared,/usr \
    --enable-soap=shared \
    --enable-ftp=shared \
    --with-curl=shared,/usr \
    --with-snmp=shared,/usr \
    --with-ldap=shared,/usr \
    --with-ldap-sasl=/usr \
    --with-imap=shared,/usr \
    --with-imap-ssl=yes \
    --with-mcrypt=shared \
    --enable-opcache \
    --enable-huge-code-pages"
_phpextensions_fpm="\
    --with-fpm-user=http \
    --with-fpm-group=http \
    --with-fpm-systemd \
    --with-fpm-acl"


options=('!lto')
arch=("$CARCH")
checkdepends=('procps-ng' 'smtp-forwarder')
license=('PHP')
url='http://www.php.net'


################################################################################
# Prepare it
################################################################################
prepare() {
    pushd "php-${pkgver}"

    echo "[SED] sapi/apache2handler/config.m4"
    sed -e '/APACHE_THREADED_MPM=/d' \
        -i sapi/apache2handler/config.m4

    echo "[SED] sapi/fpm/Makefile.frag"
    # sed -e 's#php-fpm\$(program_suffix)#php\$(program_suffix)-fpm#'
    sed -e 's/.conf.default/.conf/g' \
        -i sapi/fpm/Makefile.frag

    echo "[SED] sapi/fpm/php-fpm.service.in"
    sed -E "s|PIDFile[\s]?=[\s]?@([a-zA-Z_]+)@/run/php-fpm.pid|PIDFile=/run/${_build_fpm_service_name}/php-fpm.pid|g" \
        -i sapi/fpm/php-fpm.service.in

    local _check_files=("sapi/fpm/www.conf.in" "sapi/fpm/php-fpm.conf.in");
    for file_conf in "${_check_files[@]}"; do
        if [[ ! -f $file_conf  ]]; then
            continue;
        fi
        echo "[SED] ${file_conf}"
        sed -e "s#^listen =.*#listen = /run/${_build_fpm_service_name}/php-fpm.sock#" \
            -e "s#run/php-fpm.pid#/run/${_build_fpm_service_name}/php-fpm.pid#" \
            -e 's#^;*[ \t]*listen.owner =#listen.owner =#' \
            -e 's#^;*[ \t]*listen.group =#listen.group =#' \
            -e 's#^;*[ \t]*error_log =.*#error_log = syslog#' \
            -e 's#^;*[ \t]*chdir =.*#;chdir = /srv/http#' \
            -i "${file_conf}"
    done

    echo "[SED] php.ini-production"
    sed -e 's#^;*[ \t]*extension_dir[\t ]*=.*/.*$#extension_dir = "___EXTENSIONDIR___"#' \
        -e "s#___EXTENSIONDIR___#${_prefix}/lib/modules#g" \
        -e "s#^;*[ \t]*extension=#;extension=#g" \
        -e "s#^;*[ \t]*session.save_path[\t ]*=.*#session.save_path=___SESSIONS___#g" \
        -e "s#___SESSIONS___#/var/lib/${pkgbase}/sessions#g" \
        -i php.ini-production

    for patch_name in "${_patches[@]}"; do
        echo "[PATCH] Applying source patch ${patch_name}";
        patch -p1 -i "../${patch_name}"
    done

    if ((_phpbase <= 53)); then
        PHP_AUTOCONF="/usr/bin/autoconf-2.13" ./buildconf --force
    else
        ./buildconf --force
    fi
    rm -f tests/output/stream_isatty_*.phpt
    rm -f Zend/tests/arginfo_zpp_mismatch*.phpt
    rm -f Zend/tests/bug79919.phpt
    popd
}

_build_sapi() {
    _sapi="${1}"
    _commands="${2}"
    if (( _sapi == "cli" )); then
        if [[ ! -d "build-${_sapi}" ]]; then
            mkdir "build-${_sapi}"
        fi
        pushd "build-${_sapi}"
        if [[ -L configure ]]; then
            rm configure
        fi
        ln -s "../php-${pkgver}/configure"
        popd
    else
        cp -Ta "build-cli" "build-${_sapi}"
    fi

    pushd "build-${_sapi}"
     ./configure ${_phpconfig} ${_commands}
    patch -p1 -i "${srcdir}/make-tests.patch"

    if (($_sapi != "cli")); then
        make clean
    fi
    if ((! _build_with_custom_icu)); then
        sed -i -e 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' \
            -e 's|^runpath_var=LD_RUN_PATH|runpath_var=LIBTOOL_IS_BROKED|g' \
            libtool
    fi
    make
    popd
}

################################################################################
# BUILD them all
################################################################################
build() {
    export EXTENSION_DIR="${_prefix}/lib/modules"
    if ((_build_openssl_v10_patch)); then
        export PHP_OPENSSL_DIR="/usr/lib/openssl-1.0"
    fi
    if [[ ! -z "${_cppflags}" ]]; then
        CPPFLAGS+=" $_cppflags "
    fi
    if ((_build_with_custom_icu )); then
        local _php5_icu_first="${srcdir}/${_build_icu_src_dir}/php${_phpbase}${suffix}-icu${_pkgver_icu}"
            LDFLAGS+="-Wl,-rpath=$ORIGIN${_prefix}/lib/icu${_pkgver_icu}/lib"
        _phpextensions+=" --with-icu-dir=${_php5_icu_first} "
        if [[ ! -d $_php5_icu_first ]]; then
            mkdir -p "${_php5_icu_first}"
        fi
        pushd "${_build_icu_src_dir}"
        ./configure --prefix="${_php5_icu_first}" \
            --sysconfdir="${_php5_icu_first}/etc" \
            --mandir="${_php5_icu_first}/share/man" \
            --sbindir="${_php5_icu_first}/bin" \
            --libdir="${_php5_icu_first}/lib" \
            --includedir="${_php5_icu_first}/include" \
            --disable-tests \
            --disable-debug
        make -j$(nproc)
        make install
        ./configure --prefix="${_prefix}/lib/icu${_pkgver_icu}" \
            --sysconfdir="${_prefix}/lib/icu${_pkgver_icu}/etc" \
            --mandir="${_prefix}/lib/icu${_pkgver_icu}/share/man" \
            --sbindir="${_prefix}/lib/icu${_pkgver_icu}/bin" \
            --libdir="${_prefix}/lib/icu${_pkgver_icu}/lib" \
            --includedir="${_prefix}/lib/icu${_pkgver_icu}/include" \
            --disable-tests \
            --disable-debug
        make -j$(nproc)
        popd
    fi

    if ((_build_ini_per_sapi || _build_per_sapi)); then

    # CLI
    _cli_addons=''
    if (( ! _build_per_sapi )); then
        # CGI enabled here only for tests passing, then overriden later by cgi build
        _cli_addons+=" --enable-cgi "
    fi
    _build_sapi "cli" "\
        --sysconfdir=/${_build_sapi_ini_cli} \
        --with-config-file-path=/${_build_sapi_ini_cli} \
        --enable-cli \
        ${_phpextensions} \
        ${_cli_addons} \
        --disable-fpm \
        --disable-embed \
        --disable-phpdbg \
    "

    # phpdbg
    if ((_build_phpdbg)); then
        _sapi="phpdbg"
        _build_sapi "phpdbg" "\
            --sysconfdir=/${_build_sapi_ini_phpdbg} \
            --with-config-file-path=/${_build_sapi_ini_phpdbg} \
            --disable-all \
            --enable-phpdbg \
            --disable-cgi \
            --disable-cli \
            --disable-fpm \
            --disable-embed \
        "
    fi

    # embed
    if ((_build_embed)); then
        _build_sapi "embed" "\
            --sysconfdir=/${_build_sapi_ini_embed}  \
            --with-config-file-path=/${_build_sapi_ini_embed}  \
            --disable-all \
            --enable-embed=shared \
            --disable-cgi \
            --disable-cli \
            --disable-fpm \
            --disable-phpdbg \
        "
    fi

    # cgi
    _build_sapi "cgi" "\
        --sysconfdir=/${_build_sapi_ini_cgi} \
        --with-config-file-path=/${_build_sapi_ini_cgi} \
        --disable-all \
        --enable-cgi \
        --disable-cli \
        --disable-fpm \
        --disable-embed \
        --disable-phpdbg \
    "

    # litespeed
    if ((_build_litespeed)); then
        _cflags="${CFLAGS}"
        export CFLAGS="${CFLAGS} -Wno-error=format-security"
        _build_sapi "litespeed" "\
            --sysconfdir=/${_build_sapi_ini_litespeed} \
            --with-config-file-path=/${_build_sapi_ini_litespeed} \
            --disable-all \
            --disable-cgi \
            --disable-cli \
            --disable-fpm \
            --disable-embed \
            --disable-phpdbg \
            ${_build_sapi_litespeed} \
        "
        export CFLAGS="${_cflags}"
    fi

    # fpm
    _build_sapi "fpm" "\
        --sysconfdir=/${_build_sapi_ini_fpm} \
        --with-config-file-path=/${_build_sapi_ini_fpm} \
        --disable-all \
        --enable-fpm \
        ${_phpextensions_fpm} \
        --disable-cli \
        --disable-cgi \
        --disable-embed \
        --disable-phpdbg \
    "
    else

    # CLI
    if ((_build_phpdbg)); then
        _cli_addons+=" --enable-phpdbg "
    fi
    _build_sapi "cli" "\
        --sysconfdir=/${_build_sapi_ini_cli} \
        --with-config-file-path=/${_build_sapi_ini_cli} \
        --enable-cli \
        ${_phpextensions} \
        ${_cli_addons} \
        --enable-fpm \
        --enable-cgi \
        --enable-embed=shared \
        --enable-fpm \
        ${_phpextensions_fpm} \
        ${_build_sapi_litespeed} \
    "
    fi

    # apache
    _build_sapi "apache" "\
        --disable-all \
        --disable-cli \
        --disable-cgi \
        --disable-fpm \
        --disable-embed \
        --disable-phpdbg \
        --with-apxs2 \
        --sysconfdir=/${_build_sapi_ini_apache} \
        --with-config-file-path=/${_build_sapi_ini_apache} \
    "

}

check() {
    pushd "build-cli"
    # Check if sendmail was configured correctly (FS#47600)
    export REPORT_EXIT_STATUS=1
    export NO_INTERACTION=1
    export SKIP_ONLINE_TESTS=1
    export SKIP_SLOW_TESTS=1
    export TESTS='tests Zend'
    if ((_phpbase > 73)); then
        export TEST_PHP_ARGS="-j$(nproc)"
    fi
    # Patch tests to run PHP modules in needed order
    sapi/cli/php -n ../php-makefile-patcher.php Makefile
    make test
    popd
}

################################################################################
# Custom code
################################################################################
_install_module_ini() {
    local extension=$(echo "${1}" | sed 's/\.so//')
    local priority="${_priority_default}"
    case "${extension}" in
        "json")
            priority="${_priority_json}"
            ;;
        "xml")
            priority="${_priority_xml}"
            ;;
        "openssl")
            priority="${_priority_openssl}"
            ;;
        "mysqlnd")
            priority="${_priority_mysqlnd}"
            ;;
        "pdo")
            priority="${_priority_pdo}"
            ;;
        "opcache")
            priority="${_priority_opcache}"
            ;;
        "dom")
            priority="${_priority_dom}"
            ;;
    esac
    local extension_type="extension"
    case "${extension}" in
        "opcache" | "xdebug")
            extension_type="zend_extension"
            ;;
        "recode")
            extension_type=";extension"
            ;;
    esac

    if [[ ! -d "${pkgdir}/${_build_conf_d}" ]]; then
        mkdir -p "${pkgdir}/${_build_conf_d}"
    fi
    echo "${extension_type}=${extension}.so" > "${pkgdir}/${_build_conf_d}/${priority}-${extension}.ini"
    chmod 0644 "$pkgdir/${_build_conf_d}/${priority}-${extension}.ini"
    _last_priority=${priority}
    _last_extension=${extension}
}

_install_module() {
    if [[ -f "build-cli/modules/${1}.so" ]]; then
        install -D -m755 "build-cli/modules/${1}.so" "${pkgdir}${_prefix}/lib/modules/${1}.so";
        _install_module_ini "${1}"
    else
        echo "[DEBUG]: Install_module can't find ${1}.so, skipped"
    fi
}

###############################################################################
# PHP: SAPI's
###############################################################################

# Main package
package_moly-php56() {
    # Binary names
    pkgdesc='PHP. A general-purpose scripting language that is especially suited to web development'
    depends=('zlib' 'pcre' 'libedit')
    if ((_build_with_custom_icu)); then
        pushd "${_build_icu_src_dir}"
        make DESTDIR="${pkgdir}" install
        popd
        pushd "${pkgdir}/usr/lib/${pkgbase}/icu${_pkgver_icu}"
        rm -rf bin include share
        popd
    fi

    # Install session dir
    install -d -m1733 "${pkgdir}/var/lib/${pkgbase}/sessions"

    # conf.d dir with shared modules
    install -d -m755 "${pkgdir}/${_build_conf_d}/"

    pushd "build-cli"
    make -j1 INSTALL_ROOT=${pkgdir} install-{modules,build,headers,programs}


    # Cleanup for CGI"
    rm -rf "${pkgdir}/usr/bin/${pkgbase}-cgi"
    popd

    pushd "${pkgdir}${_prefix}/lib/modules/"
    # remove static modules
    rm -f *.a
    # remove modules provided by subpackages
    rm -f {enchant,imap,intl,pspell,snmp,tidy,curl,ldap,bz2,bcmath,soap,zip,gmp,dba,opcache,json,gd,mcrypt,sodium,recode}.so
    rm -f {pdo_dblib,mssql}.so
    rm -f {dom,simplexml,xml,xmlreader,xmlwriter,xsl,wddx,xmlrpc}.so
    rm -f {pgsql,pdo_pgsql}.so
    rm -f {odbc,pdo_odbc}.so
    rm -f {pdo_sqlite,sqlite3}.so
    rm -f {pdo_firebird.so,interbase.so}
    rm -f {mysqli,pdo_mysql,mysqlnd,mysql}.so
    rm -f {openssl,ffi,pcntl,ftp,calendar,ctype,fileinfo,iconv,mbstring,exif,pdo,phar,posix,shmop}.so
    rm -f {sockets,tokenizer,gettext,sysvmsg,sysvsem,sysvshm}.so
    popd
    pushd build-cli
    if (( ! _build_ini_per_sapi )); then
        backup=("${_build_sapi_ini_cli}/php.ini")
        install -d -m755 "${pkgdir}/${_build_sapi_ini_cli}"
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_cli}/php.ini"

        local posix_functions="posix_kill,posix_setpgid,posix_setsid,posix_setuid,posix_getpwuid,posix_kill,posix_mkfifo,posix_setpgid,posix_setsid,posix_setuid,posix_setuid,posix_uname"
        local pcntl_functions="pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority"
        local p_functions="popen,pclose,proc_close,proc_get_status,proc_nice,proc_open,proc_terminate"
        local system_functions="apache_child_terminate,define_syslog_variables,syslog,dl,exec,passthru,system,shell_exec,escapeshellarg,escapeshellcmd"

        sed -i 's/disable_functions \=/disable_functions='"$system_functions"','"$posix_functions"','"$pcntl_functions"','"$p_functions"'/' ${pkgdir}/${_build_sapi_ini_cli}/php.ini
        sed -i 's/;error_log \= php_errors.log/error_log = \/var\/log\/moly\/php'"${phpbase}"'\/error.log/' ${pkgdir}/${_build_sapi_ini_cli}/php.ini
        sed -i 's/post_max_size \= 8M/post_max_size = 50M/' ${pkgdir}/${_build_sapi_ini_cli}/php.ini
        sed -i 's/upload_max_filesize \= 2M/upload_max_filesize = 50M/' ${pkgdir}/${_build_sapi_ini_cli}/php.ini
        sed -i 's/default_socket_timeout \= 60/default_socket_timeout = 10/' ${pkgdir}/${_build_sapi_ini_cli}/php.ini
    fi
    popd

    # fix paths in executables
    sed -i "/^includedir=/c \includedir=${_prefix}/include" ${pkgdir}${_prefix}/bin/phpize
    sed -i "/^include_dir=/c \include_dir=${_prefix}/include" ${pkgdir}${_prefix}/bin/php-config

    _install_all_modules_and_depends
    depends+=("${_all_ext_depends[@]}")
}

# Cli + phar
package_moly-php56-cli() {
    _sapi="cli"
    pkgdesc="cli (command-line executable) version for ${pkgbase}"
    depends=("${pkgbase}=${pkgver}")
    depends+=("${_sapi_depends[@]}")
    pushd "build-${_sapi}"
    make -j1 INSTALL_ROOT="${pkgdir}" install-cli
    make -j1 INSTALL_ROOT="${pkgdir}" install-pharcmd

    if ((_build_ini_per_sapi)); then
        backup=("${_build_sapi_ini_cli}/php.ini")
        install -d -m755 "${pkgdir}/${_build_sapi_ini_cli}"
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_cli}/php.ini"
    fi
    # Cleanup for CGI
    rm -rf "${pkgdir}/usr/bin/${pkgbase}-cgi"
    popd
}
# End cli

# CGI
package_moly-php56-cgi() {
    _sapi="cgi"
    pkgdesc="CGI and FCGI SAPI for ${pkgbase}"
    depends=("${pkgbase}=${pkgver}")
    depends+=("${_sapi_depends[@]}")
    if ((_build_ini_per_sapi || _build_per_sapi)); then
        pushd "build-${_sapi}"
    else
        pushd "build-cli"
    fi
    if ((_build_ini_per_sapi)); then
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_cgi}/php.ini"
        backup=("${_build_sapi_ini_cgi}/php.ini")
    fi
    case "${_phpbase}" in
        53 | 54)
            install -D -m755 sapi/cgi/php-cgi "${pkgdir}/${_prefix}/bin/php-cgi"
            ;;
        *)
            make -j1 INSTALL_ROOT="${pkgdir}" install-cgi
            ;;
    esac
    popd
}
# CGI end

# Apache
package_moly-php56-apache() {
    _sapi="apache"
    _build_mod_php_so="libphp${_suffix_so}.so"
    _build_mod_php_module="php_module${_suffix_so}"
    _build_build_php_script_name="php${_suffix_so}-script"
    _apache_module_conf="${pkgbase}-module.conf"
    pkgdesc="Apache SAPI for ${pkgbase}"
    depends=("${pkgbase}=${pkgver}" 'apache')
    depends+=("${_sapi_depends[@]}")
    depends+=('libxcrypt');
    depends+=('ncurses');
    backup=("${_build_apache_cfg}/${_apache_module_conf}")
    echo "# End of LoadModule in httpd.conf - see ArchWiki Apache HTTP Server"
    echo "LoadModule ${_build_mod_php_module} modules/lib${pkgbase}.so"
    echo "AddHandler ${_build_php_script_name} .php"
    echo "# End of Include List"
    echo "Include conf/extra/${_apache_module_conf}"

    pushd "build-${_sapi}"
    if ((_build_ini_per_sapi)); then
        backup+=("${_build_sapi_ini_apache}/php.ini")
        install -d -m755 "${pkgdir}/${_build_sapi_ini_apache}"
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_apache}/php.ini"
    fi
    install -D -m755 "libs/${_build_mod_php_so}" "${pkgdir}/usr/lib/httpd/modules/lib${pkgbase}.so"
    patchelf --set-soname \
        "lib${pkgbase}.so" \
        "${pkgdir}/usr/lib/httpd/modules/lib${pkgbase}.so"
    popd

    install -D -m644 "php-apache.conf" "${pkgdir}/${_build_apache_cfg}/${_apache_module_conf}"
    echo "[SED] ${pkgdir}/${_build_apache_cfg}/${_apache_module_conf}"
    sed -e "s#@MODULE@#${_build_mod_php_module}#" \
        -i "${pkgdir}/${_build_apache_cfg}/${_apache_module_conf}"
}
# Apache end

# FPM
package_moly-php56-fpm() {
    _sapi="fpm"
    install="php-fpm.install"
    pkgdesc="FastCGI Process Manager for ${pkgbase}"
    depends=("${pkgbase}=${pkgver}" 'systemd-libs' 'acl')
    depends+=("${_sapi_depends[@]}")
    backup=("${_build_sapi_ini_fpm}/php-fpm.conf")
    if ((_phpbase >= 70)); then
        backup+=("${_build_sapi_ini_fpm}/php-fpm.d/www.conf")
    fi
    options=('!emptydirs')
    if ((_build_ini_per_sapi || _build_per_sapi)); then
        pushd "build-${_sapi}"
    else
        pushd "build-cli"
    fi
    if ((_build_ini_per_sapi)); then
        backup+=("${_build_sapi_ini_fpm}/php.ini")
        install -d -m755 "${pkgdir}/${_build_sapi_ini_fpm}/"
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_fpm}/php.ini"
    fi
    make -j1 INSTALL_ROOT="${pkgdir}" install-fpm
    install -D -m644 "sapi/fpm/php-fpm.service" "${pkgdir}/usr/lib/systemd/system/${_build_fpm_service_name}.service"
    echo "d /run/${_build_fpm_service_name} 755 root root" > php-fpm.tmpfiles
    install -D -m644 "php-fpm.tmpfiles" "${pkgdir}/usr/lib/tmpfiles.d/${_build_fpm_service_name}.conf"
    popd
}
# FPM end

# embed sapi
package_moly-php56-embed() {
    _sapi="embed"
    pkgdesc="Embedded PHP SAPI library for ${pkgbase}"
    depends=("${pkgbase}=${pkgver}" 'ncurses' 'systemd-libs' 'libxcrypt' 'acl' 'ncurses')
    depends+=("${_sapi_depends[@]}")
    options=('!emptydirs')
    if ((_build_ini_per_sapi || _build_per_sapi)); then
        pushd "build-${_sapi}"
    else
        pushd "build-cli"
    fi
    install -d -m755 "${pkgdir}/${_build_sapi_ini_embed}"
    if ((_build_ini_per_sapi)); then
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_embed}/php.ini"
        backup=("${_build_sapi_ini_embed}/php.ini")
    fi
    make -j1 INSTALL_ROOT="${pkgdir}" PHP_SAPI=embed install-sapi
    mv "${pkgdir}/usr/lib/libphp${_suffix_so}.so" "${pkgdir}/usr/lib/lib${pkgbase}.so"
    popd
    patchelf --set-soname "lib${pkgbase}.so" "${pkgdir}/usr/lib/lib${pkgbase}.so"
}
# embed sapi end

# phpdbg sapi
package_moly-php56-phpdbg() {
    _sapi="phpdbg"
    options=('!emptydirs')
    pkgdesc="Interactive PHP debugger for ${pkgbase} ($_sapi)"
    depends=("${pkgbase}=${pkgver}")
    depends+=("${_sapi_depends[@]}")
    if ((_build_ini_per_sapi || _build_per_sapi)); then
        pushd "build-${_sapi}"
    else
        pushd "build-cli"
    fi
    if ((_build_ini_per_sapi)); then
        backup=("${_build_sapi_ini_phpdbg}/php.ini")
        install -d -m755 "${pkgdir}/${_build_sapi_ini_phpdbg}"
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_phpdbg}/php.ini"
    fi
    make -j1 INSTALL_ROOT="${pkgdir}" "install-${_sapi}"
    popd
}
# phpdbg sapi end

# litespeed sapi
package_moly-php56-litespeed() {
    _sapi="litespeed"
    pkgdesc="LiteSpeed SAPI for ${pkgbase}"
    depends=("${pkgbase}=${pkgver}")
    depends+=("${_sapi_depends[@]}")
    if ((_build_ini_per_sapi || _build_per_sapi)); then
        pushd "build-${_sapi}"
    else
        pushd "build-cli"
    fi
    if ((_build_ini_per_sapi)); then
        install -D -m644 "../php-${pkgver}/php.ini-production" "${pkgdir}/${_build_sapi_ini_cgi}/php.ini"
        backup=("${_build_sapi_ini_cgi}/php.ini")
    fi
    case "${_phpbase}" in
        *)
            install -D -m755 sapi/litespeed/php "${pkgdir}/usr/bin/ls${pkgbase}"
            ;;
    esac
    popd
}
# litespeed sapi end

###############################################################################
# PEAR + PECL
###############################################################################

# PEAR
package_moly-php56-pear() {
    pkgdesc="PHP Extension and Application Repository (PEAR) for ${pkgbase}"
    depends=(
        "${pkgbase}=${pkgver}"
        "${pkgbase}-cli${_suffix}=${pkgver}"
    )
    #backup=("${_build_sapi_ini_cli}/pear.conf")
    install -d "${pkgdir}${_prefix}/share/pear/htdocs"
    install -d "${pkgdir}${_prefix}/share/pear/data"
    install -d "${pkgdir}${_prefix}/share/pear/doc"
    install -d "${pkgdir}${_prefix}/share/pear/test"
    install -d "${pkgdir}${_prefix}/share/pear/cfg"
    install -d "${pkgdir}/var/lib/${pkgbase}/pear/cache"
    install -d "${pkgdir}/var/lib/${pkgbase}/pear/metadata"
    install -d "${pkgdir}/var/lib/${pkgbase}/pear/download"
    install -d "${pkgdir}/var/lib/${pkgbase}/pear/temp"
    export PHP_PEAR_SYSCONF_DIR="${_build_sapi_ini_cli}"
    pushd build-cli

    cp "${srcdir}/php-${pkgver}/pear/install-pear-nozlib.phar" "pear/install-pear-nozlib.phar"

    if((_phpbase == 74)); then
        pear_dir="${_prefix/\//}/share/pear"
    else
        pear_dir="${_prefix}/share/pear"
    fi

    INSTALL_ROOT="${pkgdir}/" ./sapi/cli/php -n \
        -d extension=modules/xml.so \
        -d extension=modules/phar.so \
        -d date.timezone=UTC -d memory_limit=-1 -d short_open_tag=0 -d open_basedir= -d safe_mode=0 \
        -d 'error_reporting=E_ALL&~E_DEPRECATED' -d detect_unicode=0 "pear/install-pear-nozlib.phar" \
        --php      "${_prefix}/bin/php" \
        --bin      "${_prefix}/bin" \
        --ext      "${_prefix}/lib/modules" \
        --man      "${_prefix}/share/man" \
        --dir      "${pear_dir}" \
        --data     "${_prefix}/share/pear/data" \
        --doc      "${_prefix}/share/pear/doc" \
        --test     "${_prefix}/share/pear/test" \
        --www      "${_prefix}/share/pear/htdocs" \
        --config   "${_prefix}/share/pear/cfg" \
        --cache      "/var/lib/${pkgbase}/pear/cache" \
        --download   "/var/lib/${pkgbase}/pear/download" \
        --metadata   "/var/lib/${pkgbase}/pear/metadata" \
        --debug \
        --force
    # fix pear.conf with unserialize
    # first arg: path to pear.conf
    # second arg: PEAR base /var path
    ./sapi/cli/php -n ../pear-config-patcher.php \
        "${pkgdir}/${_build_sapi_ini_cli}/pear.conf" \
        "/var/lib/${pkgbase}/pear"
    popd
    # remove unneeded files
    rm -rf "${pkgdir}"/.{channels,depdb,depdblock,filemap,lock,registry}
    #rename binaries
    for i in pear peardev pecl; do
        _target="${pkgbase/php/$i}"
        # fix hardcoded paths
        sed "s|PHP=php|PHP=\"${_prefix}/bin/php\"|g; s|\"/usr/bin/php\"|\"${_prefix}/bin/php\"|g; s| -n | |g" \
            -i "${pkgdir}${_prefix}/bin/${i}"

        : '
        if [[ "$i" == "pecl" ]]; then
            echo "Moving ${pkgdir}${_prefix}bin/${i} => ${srcdir}/${pkgbase}-pecl-bin/"
            mkdir -p "${srcdir}/${pkgbase}-pecl-bin/"
            mv "${pkgdir}/usr/bin/pecl" "${srcdir}/${pkgbase}-pecl-bin/"
        else
            echo "Moving ${pkgdir}/usr/bin/${i} => ${pkgdir}/usr/bin/${_target}"
            mv "${pkgdir}/usr/bin/${i}" "${pkgdir}/usr/bin/${_target}"
        fi
        '
    done
}
# PEAR end

_install_all_modules_and_depends() {
    ###############################################################################
    # PHP Modules: First need
    ###############################################################################

    # OpenSSL
        _all_ext_depends+=("${_ext_depends_openssl[@]}")
        _install_module openssl

    # Json
        _install_module json

    # pdo
    _install_module pdo


    # mbstring
        _all_ext_depends+=("${_ext_depends_mbstring[@]}")
    _install_module mbstring


    # phar
    _install_module phar


    ###############################################################################
    # PHP modules: XML
    ###############################################################################

    # XML modules combined package
        _all_ext_depends+=( 'libxml2')
        _install_module xml

        _install_module wddx

        _install_module simplexml

        _install_module dom

        _install_module xmlreader

        _install_module xmlwriter

    # Tidy
        _all_ext_depends+=( 'tidy')
        _install_module tidy

    # XSL
        _all_ext_depends+=('libxslt')
        _install_module xsl

    ###############################################################################
    # PHP modules: Databases
    ###############################################################################

    # MySQL
        _all_ext_depends+=("${_ext_depends_mysql[@]}")
        _install_module mysqlnd
        _install_module mysql
        _install_module mysqli
        _install_module pdo_mysql

    # pdo_sqlite + sqlite3
        _all_ext_depends+=("${_ext_depends_sqlite[@]}")
        _install_module sqlite3
        _install_module pdo_sqlite

    # ODBC
        _all_ext_depends+=("${_ext_depends_odbc[@]}")
        _install_module odbc
        _install_module pdo_odbc

    # PostgreSQL
        _all_ext_depends+=("${_ext_depends_pgsql[@]}")
        _install_module pgsql
        _install_module pdo_pgsql

    # interbase
        _all_ext_depends+=( "libfbclient")
        _install_module interbase

    # firebird
        _all_ext_depends+=("${_ext_depends_firebird[@]}")
        _install_module pdo_firebird

    # pdo_dblib
        _all_ext_depends+=('freetds')
        _install_module pdo_dblib

    # mssql
        _all_ext_depends+=('freetds')
        _install_module mssql

    # Dba
        _all_ext_depends+=("${_ext_depends_dba[@]}")
        _install_module dba

    ###############################################################################
    # PHP Modules: internationalization, text, datetime
    ###############################################################################

    # Intl
        _all_ext_depends+=("${_ext_depends_intl[@]}")
        if ((_build_with_custom_icu)); then
            # Patch to proper path inside intl.so
            patchelf --set-rpath "${_prefix}/lib/icu${_pkgver_icu}/lib" "build-cli/modules/intl.so"
        fi
        _install_module intl

    # Recode
        _all_ext_depends+=( 'recode')
        _install_module recode

    # gettext
    _install_module gettext

    # iconv
    _install_module iconv

    # calendar
    _install_module calendar


    ###############################################################################
    # PHP Modules: multimedia
    ###############################################################################

    # GD
        _all_ext_depends+=("${_ext_depends_gd[@]}")
        _install_module gd

    # exif
    _install_module exif

    # fileinfo
    _install_module fileinfo


    ###############################################################################
    # PHP modules: math
    ###############################################################################

    # bcmath
        _install_module bcmath

    # gmp
        _all_ext_depends+=( 'gmp')
        _install_module gmp

    ###############################################################################
    # PHP modules: spell checking
    ###############################################################################

    # Enchant
        _all_ext_depends+=( 'enchant' 'libvoikko' 'hspell' 'hunspell' 'nuspell' 'aspell')
        _install_module enchant

    # Pspell
        _all_ext_depends+=( 'aspell')
        _install_module pspell

    ###############################################################################
    # PHP modules: compression
    ###############################################################################

    # bz2
        _all_ext_depends+=( 'bzip2')
        _install_module bz2

    # Zip
        _all_ext_depends+=( 'libzip')
        _install_module zip

    ###############################################################################
    # PHP modules: network client/servers
    ###############################################################################

    # curl
        _all_ext_depends+=( "curl")
        _install_module curl

    # SOAP
        _all_ext_depends+=( 'libxml2')
        _install_module soap

    # FTP
        _all_ext_depends+=("${_ext_depends_ftp[@]}")
        _install_module ftp

    # ldap
        _all_ext_depends+=( 'libldap' 'libsasl')
        _install_module ldap

    # SNMP
        _all_ext_depends+=("${_ext_depends_snmp[@]}")
        _install_module snmp

    # XML-RPC
        _all_ext_depends+=( 'libxml2')
        _install_module xmlrpc

    # Imap
        _all_ext_depends+=("${_ext_depends_imap[@]}")
    _install_module imap

    # sockets
    _install_module sockets

    ###############################################################################
    # PHP Modules: cryptography
    ###############################################################################

    # Sodium
        _all_ext_depends+=( "libsodium")
        _install_module sodium

    # Mcrypt
        _all_ext_depends+=( 'libmcrypt')
        _install_module mcrypt


    ###############################################################################
    # PHP Zend modules: opcache/jit
    ###############################################################################

    # Opcache
        _install_module opcache

    ###############################################################################
    # PHP posix, pcntl, shmop and System V modules
    ###############################################################################

    # posix
    _install_module posix

    # pcntl
    _install_module pcntl

    # shmop
    _install_module shmop

    # sysvmsg
    _install_module sysvmsg

    # sysvsem
    _install_module sysvsem

    # sysvshm
    _install_module sysvshm

    ###############################################################################
    # PHP Misc modules
    ###############################################################################

    # Ffi
        _all_ext_depends+=( 'libffi')
    _install_module ffi

    # ctype
    _install_module ctype

    # tokenizer
    _install_module tokenizer

    # libedit/readline
        _all_ext_depends+=( 'libedit')
    _install_module readline
}


sha256sums=('e6b8530d747000eebb0089249ec70a3b14add7b501337046700544883f62b17b'
            '0b7e98dca9c996ec10cb9b3f6296bb7547c68797fd5f35006fdfd3e97700672d'
            'ba72fc64f77822755a469314160d5889d5298f4eb5758dd7939dac9b811afe52'
            '6d0ad9becb5470ce8e5929d7d45660b0f32579038978496317544c5310281a91'
            '1369a51eee3995d7fbd1c5342e5cc917760e276d561595b6052b21ace2656d1c'
            '70e3cc00d954fa2b466a0e8f356c68bbb1e92b36304deaffd34c53cb6ae5e979'
            'b0d40038d245196480cac04bf7fd18b1c5cdab5e1b75462035cb03a87fd22e08'
            'aecd8dff7022e956718407a5b98dec19acdceef08b0a58e7266b483bc3845de6'
            'd175f0c14fdb22855090c93f76e18f04320d7bf15afc057ffde947f9bb361242'
            'f5ae925036744a5e88cea2698879aea0498e1e23aee7801923d90f16be383908'
            '12f4e3aeab72e7d24221c07b64106c496c2e300518682bd301351dc9fa6ab3cf'
            '52c5a93fb03fa8f3f99438eb803b3182766ee04e0e6b76f00b0bc848d03ff6a6'
            '3049b76460c65a70017ba2aac8f8c45725df2bbea458a96ec7164db63639e87f'
            'e07ebf146cea8e734c7704ba94f18279642df2b2f09d868781746d165041b8d5'
            'ed3184d5a6f7a3bf35ee32169f8dc3b6cba09c38f60e868e24652fe9a7dd844d'
            'c9f3b0dff07a7e9688f60b92a2a15817bd7cd59a8c5278cae629d856be66de5c'
            'e2fcf18cbc29476beb5f321b3392f68a769fdab8de2e28891c9781f878cae288'
            'c9b3c4153596b605a41456e8242d98e474be6391d6fb4b6ce70a21c4c23b5203'
            '7e59ff3e1669d55f2a26ccdd748bfed6bbfd85d5d9206c1241cfd4443994f42c'
            '3cac44508a658b7357e8b5b3c9bd83bea3f97a6020c3b6b9754112693850c925'
            '558e780e93dfa861a366c49b4d156d8fc43f17898f001ae6033ec63c33d5d41c'
            '40bcc1e5058602302198d0925e431495391d8469499593af477f59d84d32f764'
            '8839419bb3aedfae3ae6c53953373d647abe68d5e5ad4a89a90f9f5df4b1d7e6')
